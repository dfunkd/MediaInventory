<Application x:Class="MediaInventory.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:cc="clr-namespace:MediaInventory.CustomControls"
             xmlns:conv="clr-namespace:MediaInventory.Resources"
             xmlns:local="clr-namespace:MediaInventory"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="Inventory.xaml"
             x:Name="appXaml">

    <Application.Resources>
        <conv:BinaryToImageConverter x:Key="BinaryToImageConverter" />
        <conv:BooleanTrueToVisibilityConverter x:Key="BooleanTrueToVisibilityConverter" />
        <conv:CheckOutEnabledConverter x:Key="CheckOutEnabledConverter" />
        <conv:DateTimeToDateAndTimeOrNullConverter x:Key="DateTimeToDateAndTimeOrNullConverter" />
        <conv:EmptyStringToCollapsedConverter x:Key="EmptyStringToCollapsedConverter" />
        <conv:ForgotTypeToVisibilityConverter x:Key="ForgotTypeToVisibilityConverter" />
        <conv:GenreListToStringConverter x:Key="GenreListToStringConverter" />
        <conv:InventoryTypeToIsCheckedConverter x:Key="InventoryTypeToIsCheckedConverter" />
        <conv:IsCheckedOutToAlternateRowColorConverter x:Key="IsCheckedOutToAlternateRowColorConverter" />
        <conv:IsCheckedOutToBackgroundColorConverter x:Key="IsCheckedOutToBackgroundColorConverter" />
        <conv:IsCheckedOutToRowColorConverter x:Key="IsCheckedOutToRowColorConverter" />
        <conv:IsCheckedOutToTextConverter x:Key="IsCheckedOutToTextConverter" />
        <conv:IsWantedOwnedBackgroumdConnverter x:Key="IsWantedOwnedBackgroumdConnverter" />
        <conv:IsWantedOwnedTextConverter x:Key="IsWantedOwnedTextConverter" />
        <conv:MeasurementConverter x:Key="MeasurementConverter" />
        <conv:MovieGroupHeaderConverter x:Key="MovieGroupHeaderConverter" />
        <conv:MovieGroupHeaderPluralConverter x:Key="MovieGroupHeaderPluralConverter" />
        <conv:NullToCollapsedConverter x:Key="NullToCollapsedConverter" />
        <conv:NullToStringConverter x:Key="NullToStringConverter" />
        <conv:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
        <conv:PrepCookTimeConverter x:Key="PrepCookTimeConverter" />
        <conv:StringContentToVisibilityConverter x:Key="StringContentToVisibilityConverter" />
        <conv:TotalPrepCookTimeConverter x:Key="TotalPrepCookTimeConverter" />
        <conv:ValuationBackgroundColorConverter x:Key="ValuationBackgroundColorConverter" />
        <conv:ValuationTextConverter x:Key="ValuationTextConverter" />
        <!--Linear Graient Brushes-->
        <LinearGradientBrush x:Key="HeaderContentControlBackground" EndPoint="0.5,0" StartPoint="0.5,1">
            <GradientStop Color="#FF058686" Offset="0" />
            <GradientStop Color="#FF0F5DA3" Offset="0.17" />
            <GradientStop Color="#FF13477B" Offset="0.28" />
            <GradientStop Color="#FF19263F" Offset="0.66" />
            <GradientStop Color="#FF12283F" Offset="1" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="InvalidLoginHeaderContentControlBackground" EndPoint="0.5,0" StartPoint="0.5,1">
            <GradientStop Color="#FFA00610" Offset="0" />
            <GradientStop Color="#FFBB1123" Offset="0.17" />
            <GradientStop Color="#FF8D1620" Offset="0.28" />
            <GradientStop Color="#FF8D1620" Offset="0.66" />
            <GradientStop Color="#FF471418" Offset="1" />
        </LinearGradientBrush>
        <!--Solid Color Brushes-->
        <SolidColorBrush x:Key="CancelButtonBorderBrush" Color="#FF783C3B" />
        <SolidColorBrush x:Key="CancelButtonBackground" Color="#FF783C3B" />
        <SolidColorBrush x:Key="CancelButtonForeground" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="CancelButtonMouseOver" Color="#FFB46765" />
        <SolidColorBrush x:Key="CancelButtonPressed" Color="#FFD5ABAA" />
        <SolidColorBrush x:Key="CancelButtonFocused" Color="#FF6A6A6A" />
        <SolidColorBrush x:Key="DataGridColumnHeaderBackground" Color="#FF354B6C" />
        <SolidColorBrush x:Key="DataGridColumnHeaderBorderBrush" Color="#FF373737" />
        <SolidColorBrush x:Key="DataGridColumnHeaderForeground" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="DisabledBackground" Color="#FF6A6A6A" />
        <SolidColorBrush x:Key="DisabledForeground" Color="#FF783C3B" />
        <SolidColorBrush x:Key="HeaderContentControlLineSepColor" Color="#A6FFFFFF" />
        <SolidColorBrush x:Key="HeaderContentControlForeground" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="InvalidBackground" Color="#FF6A6A6A" />
        <SolidColorBrush x:Key="InvalidForeground" Color="#FF783C3B" />
        <SolidColorBrush x:Key="InvalidLoginHeaderContentControlLineSepColor" Color="#A6A00610" />
        <SolidColorBrush x:Key="InvalidLoginHeaderControlForeground" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="NormalButtonBorderBrush" Color="#FF354A6C" />
        <SolidColorBrush x:Key="NormalButtonBackground" Color="#FF354A6C" />
        <SolidColorBrush x:Key="NormalButtonForeground" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="NormalButtonMouseOver" Color="#FF597BAE" />
        <SolidColorBrush x:Key="NormalButtonPressed" Color="#FF9EB2CF" />
        <SolidColorBrush x:Key="NormalButtonFocused" Color="#FF6A6A6A" />
        <SolidColorBrush x:Key="NormalMenuItemBackground" Color="#FF354A6C" />
        <SolidColorBrush x:Key="NormalMenuItemBorderBrush" Color="#FF373737" />
        <SolidColorBrush x:Key="NormalMenuItemForeground" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="TextBlockForeground" Color="#FFFFFFFF" />
        <!--Thinkness (Margin, BorderThickness, etc)-->
        <Thickness x:Key="BorderThickness" Bottom="1" Left="1" Right="1" Top="1" />
        <Thickness x:Key="ButtonPadding" Bottom="3" Left="16" Right="16" Top="3" />
        <!--Button Styles-->
        <Style x:Key="CancelExpandingButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{DynamicResource CancelButtonBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource CancelButtonBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="{DynamicResource CancelButtonForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource CancelButtonMouseOver}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource CancelButtonPressed}" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource CancelButtonFocused}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                    <Setter Property="Background" Value="{DynamicResource InvalidBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource InvalidForeground}" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="LinkButton" TargetType="Button">
            <Setter Property="Foreground" Value="White" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <TextBlock FontSize="10">
                                <ContentPresenter />
                        </TextBlock>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Foreground" Value="Red" />
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="NormalExpandingButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="#FF354B6C" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalButtonBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="#FFFFFFFF" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonMouseOver}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonPressed}" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource NormalButtonFocused}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                    <Setter Property="Background" Value="{DynamicResource InvalidBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource InvalidForeground}" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TransparentExpandingButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="{DynamicResource CancelButtonForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="Chrome" Property="BorderBrush" Value="Transparent" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="Transparent" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <!--CheckBox Styles-->
        <SolidColorBrush x:Key="glyphDefaultBordeBrush" Color="#FF4F6982"/>
        <SolidColorBrush x:Key="checkBoxOutsideBorderDefaultBackgroundBrush" Color="#FFF4F4FF"/>
        <SolidColorBrush x:Key="checkBoxOutsideBorderDefaultBorderBrush" Color="#FF8484FF"/>
        <LinearGradientBrush x:Key="checkBoxInsideBorderDefaultBackgroundBrush" EndPoint="0.854,0.854" StartPoint="0.146,0.146">
            <GradientStop Color="#FFCACFFF" Offset="0"/>
            <GradientStop Color="#FFF6F6FF" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="checkBoxInsideBorderDefaultBorderBrush" EndPoint="0.854, 0.854" StartPoint="0.146, 0.146">
            <GradientStop Color="#FFA2ACFF" Offset="0"/>
            <GradientStop Color="#FFE4E6FF" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="checkBoxOutsideBorderIsMouseOverBackgroundBrush" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="checkBoxOutsideBorderIsMouseOverBorderBrush" Color="#FF848484"/>
        <LinearGradientBrush x:Key="checkBoxInsideBorderIsMouseOverBackgroundBrush" EndPoint="0.854, 0.854" StartPoint="0.146, 0.146">
            <GradientStop Color="#FFA4A7ED" Offset="0"/>
            <GradientStop Color="#FFE3E3F9" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="checkBoxInsideBorderIsMouseOverBorderBrush" EndPoint="0.854, 0.854" StartPoint="0.146, 0.146">
            <GradientStop Color="#FF6E77E0" Offset="0"/>
            <GradientStop Color="#FFC7C8F4" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="checkBoxOutsideBorderIsPressedBackgroundBrush" Color="#FFE5ECF7"/>
        <SolidColorBrush x:Key="checkBoxOutsideBorderIsPressedBorderBrush" Color="#FF8484FF"/>
        <LinearGradientBrush x:Key="checkBoxInsideBorderIsPressedBackgroundBrush" EndPoint="0.854,0.854" StartPoint="0.146,0.146">
            <GradientStop Color="#FF5B6EE1" Offset="0"/>
            <GradientStop Color="#FFCECEF7" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="checkBoxInsideBorderIsPressedBorderBrush" EndPoint="0.854,0.854" StartPoint="0.146,0.146">
            <GradientStop Color="#FF2087C9" Offset="0"/>
            <GradientStop Color="#FFA4CDEB" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="checkBoxOutsideBorderIsEnabledBackgroundBrush" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="checkBoxOutsideBorderIsEnabledBorderBrush" Color="#FFAEB1B5"/>
        <LinearGradientBrush x:Key="checkBoxInsideBorderIsEnabledBackgroundBrush" EndPoint="0.854,0.854" StartPoint="0.146,0.146">
            <GradientStop Color="#FFEEF0F2" Offset="0"/>
            <GradientStop Color="#FFFFFFFF" Offset="0.976"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="checkBoxInsideBorderIsEnabledBorderBrush" EndPoint="0.854,0.854" StartPoint="0.146,0.146">
            <GradientStop Color="#FFE0E2E5" Offset="0"/>
            <GradientStop Color="#FFF2F3F3" Offset="1"/>
        </LinearGradientBrush>
        <Style TargetType="{x:Type CheckBox}">
            <Setter Property="Foreground" Value="#FF870000" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Grid Width="13" Height="13" Background="#FFF4F4F4">
                                    <Border x:Name="OutsideBorder" Background="{StaticResource checkBoxOutsideBorderDefaultBackgroundBrush}" BorderBrush="{StaticResource checkBoxOutsideBorderDefaultBorderBrush}" BorderThickness="{DynamicResource BorderThickness}">
                                        <Border x:Name="InsideBorder" Margin="1" Width="Auto" Height="Auto" BorderThickness="1" Background="{StaticResource checkBoxInsideBorderDefaultBackgroundBrush}"
                                                BorderBrush="{StaticResource checkBoxInsideBorderDefaultBorderBrush}" />
                                    </Border>
                                    <Border x:Name="nullCheck" Background="{StaticResource glyphDefaultBordeBrush}" Margin="3" CornerRadius="1" Visibility="Collapsed" />
                                    <Path x:Name="CheckMark" Fill="{StaticResource glyphDefaultBordeBrush}" Stretch="Fill" Stroke="{StaticResource glyphDefaultBordeBrush}" StrokeDashCap="Round" StrokeEndLineCap="Round"
                                          StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="1" HorizontalAlignment="Stretch" Margin="3, 2, 2.125, 2.375" Width="Auto"
                                          Data="M9.890625, 3 L5.875, 9.6083333 3.875, 6.8333333 5.734375, 7.6583333 z" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True" />
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="nullCheck" Property="Visibility" Value="Visible" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="OutsideBorder" Value="{StaticResource checkBoxOutsideBorderIsMouseOverBorderBrush}" />
                                <Setter Property="Background" TargetName="OutsideBorder" Value="{StaticResource checkBoxOutsideBorderIsMouseOverBackgroundBrush}" />
                                <Setter Property="Background" TargetName="InsideBorder" Value="{StaticResource checkBoxInsideBorderIsMouseOverBackgroundBrush}" />
                                <Setter Property="BorderBrush" TargetName="InsideBorder" Value="{StaticResource checkBoxInsideBorderIsMouseOverBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="OutsideBorder" Value="{StaticResource checkBoxOutsideBorderIsPressedBackgroundBrush}" />
                                <Setter Property="Background" TargetName="InsideBorder" Value="{StaticResource checkBoxInsideBorderIsPressedBackgroundBrush}" />
                                <Setter Property="BorderBrush" TargetName="InsideBorder" Value="{StaticResource checkBoxInsideBorderIsPressedBorderBrush}" />
                                <Setter Property="BorderBrush" TargetName="OutsideBorder" Value="{StaticResource checkBoxOutsideBorderIsPressedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="OutsideBorder" Value="{StaticResource checkBoxOutsideBorderIsEnabledBackgroundBrush}" />
                                <Setter Property="BorderBrush" TargetName="OutsideBorder" Value="{StaticResource checkBoxOutsideBorderIsEnabledBorderBrush}" />
                                <Setter Property="Background" TargetName="InsideBorder" Value="{StaticResource checkBoxInsideBorderIsEnabledBackgroundBrush}" />
                                <Setter Property="BorderBrush" TargetName="InsideBorder" Value="{StaticResource checkBoxInsideBorderIsEnabledBorderBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <!--DataGrid Styles-->
        <Style TargetType="{x:Type DataGrid}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <!--DataGridColumnHeader Styles-->
        <Style TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Background" Value="{DynamicResource DataGridColumnHeaderBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource DataGridColumnHeaderBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="{DynamicResource DataGridColumnHeaderForeground}" />
        </Style>
        <!--GroupBox Styles-->
        <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
        <Style TargetType="{x:Type GroupBox}">
            <Setter Property="Background" Value="#FF373737" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalButtonPressed}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource NormalButtonPressed}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupBox}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="6" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="6" />
                            </Grid.RowDefinitions>
                            <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="{TemplateBinding Background}" CornerRadius="4" />
                            <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3, 1">
                                <ContentPresenter ContentSource="Header" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
                                <Border.OpacityMask>
                                    <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                        <Binding ElementName="Header" Path="ActualWidth" />
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Border.OpacityMask>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--HeaderContentControl (Valid) Style-->
        <Style TargetType="{x:Type cc:HeaderContentControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type cc:HeaderContentControl}">
                        <Grid SnapsToDevicePixels="True" Margin="2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Rectangle Grid.Row="0" Margin="0" Fill="{DynamicResource HeaderContentControlBackground}" />
                            <ContentPresenter Grid.Row="0" Margin="5, 1" TextBlock.Foreground="{DynamicResource HeaderContentControlForeground}" VerticalAlignment="Center" TextBlock.FontWeight="Bold" Content="{TemplateBinding Header}" SnapsToDevicePixels="True" />
                            <Rectangle Grid.Row="1" Margin="0" Height="2" Fill="{DynamicResource HeaderContentControlLineSepColor}" Opacity="1" />
                            <ContentPresenter x:Name="PART_Content" Grid.Row="2" Margin="0, 2, 0, 0" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--HeaderContentControl (Invalid) Style-->
        <Style x:Key="InvalidLoginHeaderContentControl" TargetType="{x:Type cc:HeaderContentControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type cc:HeaderContentControl}">
                        <Grid SnapsToDevicePixels="True" Margin="2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Rectangle Grid.Row="0" Margin="0" Fill="{DynamicResource InvalidLoginHeaderContentControlBackground}" />
                            <ContentPresenter Grid.Row="0" Margin="5, 1" TextBlock.Foreground="{DynamicResource InvalidLoginHeaderControlForeground}" VerticalAlignment="Center" TextBlock.FontWeight="Bold" Content="{TemplateBinding Header}" SnapsToDevicePixels="True" />
                            <Rectangle Grid.Row="1" Margin="0" Height="2" Fill="{DynamicResource InvalidLoginHeaderContentControlLineSepColor}" Opacity="1" />
                            <ContentPresenter x:Name="PART_Content" Grid.Row="2" Margin="0, 2, 0, 0" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle SnapsToDevicePixels="true" Margin="4" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
        <!--MenuItem Styles-->
        <Style x:Key="NormalExpandingMenuItemStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{DynamicResource NormalMenuItemBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalMenuItemBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="{DynamicResource NormalMenuItemForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup" />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                    <ColumnDefinition x:Name="Col3" Width="14" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Grid.Column="0" Margin="4, 0, 6, 0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
                                <Grid Grid.Column="0" Visibility="Hidden" Margin="4, 0, 6, 0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0, 2 L0, 4.8 L2.5, 7.4 L7.1, 2.8 L7.1, 0 L2.5, 4.6 z" FlowDirection="LeftToRight" />
                                </Grid>
                                <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" />
                                <ContentPresenter Grid.Column="2" Margin="8, 1" x:Name="IGTHost" ContentSource="InputGestureText" VerticalAlignment="Center" />
                                <Grid Grid.Column="3" Margin="4, 0, 6, 0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0, 0 L0, 8 L4, 4 z" />
                                </Grid>
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2">
                                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Padding" Value="6, 1" />
                                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup" />
                                <Setter Property="MinWidth" Value="0" TargetName="Col0" />
                                <Setter Property="Width" Value="Auto" TargetName="Col3" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                            </Trigger>
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Padding" Value="6 ,1" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                            </Trigger>
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                                <Setter Property="Padding" Value="0, 2" />
                            </Trigger>
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                                <Setter Property="Padding" Value="0, 2" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
                            </Trigger>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonPressed}" TargetName="Border" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                    <Setter Property="Background" Value="{DynamicResource InvalidBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource InvalidForeground}" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <!--RadioButton Styles-->
        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{DynamicResource NormalButtonBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalButtonBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="{DynamicResource NormalButtonForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <ToggleButton IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <ToggleButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ToggleButton.RenderTransform>
                        </ToggleButton>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonPressed}" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--TabItem Styles-->
        <Style TargetType="TabItem">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{DynamicResource NormalButtonBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalButtonBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="{DynamicResource NormalButtonForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Grid Name="Panel">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="10, 2" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource NormalButtonPressed}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="{DynamicResource NormalButtonBackground}" />
                            </Trigger>
                            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--ToggleButton Styles-->
        <Style TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{DynamicResource NormalButtonBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalButtonBorderBrush}" />
            <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
            <Setter Property="Foreground" Value="{DynamicResource NormalButtonForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter Name="Presenter" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForeground}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonMouseOver}" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="{DynamicResource NormalButtonPressed}" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource NormalButtonFocused}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                    <Setter Property="Background" Value="{DynamicResource InvalidBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource InvalidForeground}" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.2" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
    </Application.Resources>
</Application>